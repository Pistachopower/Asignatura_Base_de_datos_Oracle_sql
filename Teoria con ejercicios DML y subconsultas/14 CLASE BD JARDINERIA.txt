-- Tratar la salida de una consulta como si fuera una variable que cambia con cada fila
SELECT E.ENAME, E.JOB, E.DEPTNO, (SELECT D.DNAME FROM DEPT D WHERE D.DEPTNO = E.DEPTNO) AS UNA_CONSULTA
FROM EMP E;

-- ACTUALIZA EL LIMITE DE CREDITO A LO COMPRADO HASTA AHORA.
-- CALCULAR CUANDO ME DEBE
SELECT P.CODIGOCLIENTE, SUM(DP.CANTIDAD*DP.PRECIOUNIDAD)
FROM PEDIDOS P, DETALLEPEDIDOS DP
WHERE P.CODIGOPEDIDO = DP.CODIGOPEDIDO
GROUP BY P.CODIGOCLIENTE;


-- COMO PASO INTERMEDIO CALCULO LO QUE VOY A ACTUALIZAR
SELECT C.CODIGOCLIENTE, C.LIMITECREDITO,(SELECT NVL(SUM(DP.CANTIDAD*DP.PRECIOUNIDAD),0)
                                       FROM PEDIDOS P, DETALLEPEDIDOS DP
                                       WHERE P.CODIGOPEDIDO = DP.CODIGOPEDIDO
                                       AND P.CODIGOCLIENTE = C.CODIGOCLIENTE) AS NUEVO_LIMITE_CREDITO
FROM CLIENTES C
WHERE C.LIMITECREDITO <=1000;


UPDATE CLIENTES C
SET C.LIMITECREDITO = (SELECT NVL(SUM(DP.CANTIDAD*DP.PRECIOUNIDAD),0)
                       FROM PEDIDOS P, DETALLEPEDIDOS DP
                       WHERE P.CODIGOPEDIDO = DP.CODIGOPEDIDO
                       AND P.CODIGOCLIENTE = C.CODIGOCLIENTE)
WHERE C.LIMITECREDITO <=1000;


-- EJERCIOS 11-DISCODURODEROER
--11..Muestra el código, nombre y gama de los productos que nunca se han pedido (detalle pedidos)

-- 4 FORMAS DE HACERLO

--4.1
select p.codigoproducto, p.nombre, p.gama 
from productos p, GAMASPRODUCTOS g 
where p.gama=g.gama
AND P.CODIGOPRODUCTO NOT IN (SELECT CODIGOPRODUCTO FROM DETALLEPEDIDOS);

--4.2
select p.codigoproducto, p.nombre, p.gama 
from productos p, GAMASPRODUCTOS g 
where p.gama=g.gama ;
and NOT exists (select CODIGOPRODUCTO from detallepedidos where codigoproducto=p.CODIGOPRODUCTO);

--4.3
select p.codigoproducto, p.nombre, p.gama 
from productos p, GAMASPRODUCTOS g 
where p.gama=g.gama 


SELECT CODIGOPRODUCTO
FROM PRODUCTOS
MINUS
SELECT CODIGOPRODUCTO 
FROM DETALLEPEDIDOS;


--4.4.
SELECT PR.CODIGOPRODUCTO
FROM PRODUCTOS PR, DETALLEPEDIDOS DP
WHERE PR.CODIGOPRODUCTO = DP.CODIGOPRODUCTO(+)
and dp.codigoproducto is null;

SELECT DISTINCT CODIGOOFICINA
FROM EMPLEADOS E, CLIENTES C, PEDIDOS P, DETALLEPEDIDOS DP, PRODUCTOS PR
WHERE E.CODIGOEMPLEADO = C.CODIGOEMPLEADOREPVENTAS
AND C.CODIGOCLIENTE = P.CODIGOCLIENTE
AND P.CODIGOPEDIDO= DP.CODIGOPEDIDO
AND DP.CODIGOPRODUCTO = PR.CODIGOPRODUCTO
AND UPPER(PR.GAMA) ='FRUTALES';


SELECT * FROM OFICINAS O
WHERE CODIGOOFICINA NOT IN (SELECT DISTINCT CODIGOOFICINA
                            FROM EMPLEADOS E, CLIENTES C, PEDIDOS P, DETALLEPEDIDOS DP, PRODUCTOS PR
                            WHERE E.CODIGOEMPLEADO = C.CODIGOEMPLEADOREPVENTAS
                            AND C.CODIGOCLIENTE = P.CODIGOCLIENTE
                            AND P.CODIGOPEDIDO= DP.CODIGOPEDIDO
                            AND DP.CODIGOPRODUCTO = PR.CODIGOPRODUCTO
                            AND UPPER(PR.GAMA) ='FRUTALES'
                           );

SELECT * FROM CLIENTES_DEUDA;

INSERT INTO CLIENTES_DEUDA (CODCLIENTE, DEUDA)
VALUES (69, 12333);


INSERT INTO CLIENTES_DEUDA (CODCLIENTE, DEUDA)
VALUES (1,(SELECT NVL(SUM(DP.CANTIDAD*DP.PRECIOUNIDAD),0)
           FROM PEDIDOS P, DETALLEPEDIDOS DP
           WHERE P.CODIGOPEDIDO = DP.CODIGOPEDIDO
           AND P.CODIGOCLIENTE = 1
           )
        );   
           
-- PARA INSERTAR MUCHOS CAMPOS DE UNA VEZ, PUEDO UTILIZAR INSERT-SELECT
INSERT INTO CLIENTES_DEUDA (CODCLIENTE, DEUDA)
SELECT CODIGOCLIENTE,LIMITECREDITO
FROM CLIENTES;

SELECT * FROM CLIENTES_DEUDA;


INSERT INTO CLIENTES_DEUDA (CODCLIENTE, DEUDA)
SELECT C.CODIGOCLIENTE,(SELECT NVL(SUM(DP.CANTIDAD*DP.PRECIOUNIDAD),0)
                       FROM PEDIDOS P, DETALLEPEDIDOS DP
                       WHERE P.CODIGOPEDIDO = DP.CODIGOPEDIDO
                       AND P.CODIGOCLIENTE = C.CODIGOCLIENTE
                       )
FROM CLIENTES C;


SELECT C.CODIGOCLIENTE,(SELECT NVL(SUM(DP.CANTIDAD*DP.PRECIOUNIDAD),0)
                       FROM PEDIDOS P, DETALLEPEDIDOS DP
                       WHERE P.CODIGOPEDIDO = DP.CODIGOPEDIDO
                       AND P.CODIGOCLIENTE = C.CODIGOCLIENTE
                       )
FROM CLIENTES C;


---Muestra el código, nombre y gama de los productos que nunca se han pedido (detalle pedidos)
select p.codigoproducto, p.nombre, p.gama 
from productos p, GAMASPRODUCTOS g 
where p.gama=g.gama 
and P.CODIGOPRODUCTO NOT IN (select CODIGOPRODUCTO from detallepedidos);

-- EL EXISTS ES TRUE SI SE CUMPLE O FALSE SI NO SE CUMPLE
select p.codigoproducto, p.nombre, p.gama 
from productos p, GAMASPRODUCTOS g 
where p.gama=g.gama 
and NOT exists (select CODIGOPRODUCTO from detallepedidos where codigoproducto=p.CODIGOPRODUCTO);

select CODIGOPRODUCTO from detallepedidos where codigoproducto='FR-50';

