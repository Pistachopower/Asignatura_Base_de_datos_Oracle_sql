--QUE PASA CON EL DEFAULT

--EJEMPLO
DROP TABLE ALU2;

CREATE TABLE ALU2
(CODIGO INTEGER PRIMARY KEY,
NOMBRE VARCHAR2(20),
EDAD INTEGER DEFAULT 18);

INSERT INTO ALU2(CODIGO, NOMBRE)
VALUES (1, 'IRENE');

SELECT * FROM ALU2;

INSERT INTO ALU2(CODIGO, NOMBRE,EDAD)
VALUES (2, 'IRENE2', 33);


INSERT INTO ALU2(CODIGO, NOMBRE,EDAD)
VALUES (3, 'IRENE3', NULL);

/*********************/

-- FUNCIONES DE AGREGACION
SELECT MAX(EDAD), MIN(EDAD), AVG(EDAD),COUNT(*) AS NUM_ALU_1DAW
FROM ALUMNOS
WHERE UPPER(CURSO) = '1DAW';

-- POR CADA CURSO SE PUEDE
SELECT UPPER(CURSO),MAX(EDAD), MIN(EDAD), AVG(EDAD),COUNT(*)
FROM ALUMNOS
GROUP BY UPPER(CURSO);


-- PUEDO AGRUPAR POR MAS COSAS
SELECT UPPER(CURSO),SEXO,COUNT(*)
FROM ALUMNOS
GROUP BY UPPER(CURSO),SEXO;


______________________________________________________
-- PUEDO AGRUPAR POR MAS COSAS
SELECT CODIGO,UPPER(CURSO),SEXO,COUNT(*)
FROM ALUMNOS
GROUP BY CODIGO,UPPER(CURSO),SEXO;

-- EL TO_CHAR PARA NELSON
SELECT TO_CHAR(33), TO_NUMBER('33'), TO_DATE('12/09/1907','DD/MM/YYYY'),
       TO_CHAR(SYSDATE,'YYYY'),TO_CHAR(SYSDATE,'WW'),TO_CHAR(SYSDATE,'DD'),TO_CHAR(SYSDATE,'ddd'),
       TO_CHAR(SYSDATE,'mm/yyyy'), '01/'||TO_CHAR(SYSDATE,'mm/yyyy')
FROM DUAL;

SELECT nombre, TO_CHAR(FECNAC,'mm/yyyy'),'01/'||TO_CHAR(fecnac,'mm/yyyy'), nvl(fecnac, TO_DATE('12/01/1980','DD/MM/YYYY'))
FROM ALUMNOS
WHERE upper(CURSO) IN( 'PROF','1DAW');

-- OTRA FUNCION DE CADENA
SELECT NOMBRE, LENGTH(NOMBRE)
FROM ALUMNOS;


---SUBCONSULTAS.................IMPORTANTEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
-- HACER CONSULTAS DENTRO DE LA CONSULTA.

-- EJEMPLO AVERIGUAR EL ALUMNO MAS VIEJO UTILIZANDO EDAD
-- SI YO SUPIERA LA EDAD MAXIMA--> V_MAX_EDAD

SELECT *
FROM ALUMNOS
WHERE EDAD = V_MAX_EDAD;

V_MAX_EDAD COMO SE CALCULA

SELECT MAX(EDAD) FROM ALUMNOS;

-- SUSTITUYO

SELECT *
FROM ALUMNOS
WHERE EDAD = (SELECT MAX(EDAD) FROM ALUMNOS);

-- ALUMNO MAS JOVEN UTILIZANDO FECNAC
-- V_FECNAC_MAX = (SELECT MAX(FECNAC) FROM ALUMNOS);
SELECT *
FROM ALUMNOS
WHERE FECNAC = (SELECT MAX(FECNAC) FROM ALUMNOS);

-- RECORDAR QUE LOS FILTROS APLICADOS EN LA SUBCONSULTA SUELEN SER IGUALES A LOS FILTROS APLICADO EN LA CONSULTA PADRE
-- EJEMPLO
-- AVERIGUAR EL ALUMNOS MÁS VIEJO EN 1DAW, UTILIZANDO EDAD
V_MAX_EDAD_DAW = SELECT MAX(EDAD) FROM ALUMNOS WHERE UPPER(CURSO) ='1DAW';


SELECT *
FROM ALUMNOS
WHERE UPPER(CURSO) ='1DAW'
AND EDAD = (SELECT MAX(EDAD) FROM ALUMNOS);

-- HAVING: EL HAVING ES PARA PODER HACER FILTROS EN LAS FUNCIONES DE AGREGACIÓN
SELECT UPPER(CURSO), COUNT(*)--. COUNT(CODIGO) SUELE UTILIZARSE EN EL COUNT LA PK
FROM ALUMNOS
GROUP BY UPPER(CURSO);

-- SUELO UTILIZAR LA PK, PORQUE EL COUNT NO CUENTA LOS NULOS.
SELECT UPPER(CURSO), COUNT(CODIGO), COUNT(NOMBRE), COUNT(EDAD), COUNT(FECNAC)
FROM ALUMNOS
GROUP BY UPPER(CURSO);

-- PREGUNTA TIPICA QUE ME HAGO
-- CUANTOS ALUMNOS TIENE CADA CURSO, Y OBTENER LOS CURSOS QUE TIENEN MÁS DE 10 ALUMNOS.
SELECT UPPER(CURSO), COUNT(CODIGO)
FROM ALUMNOS
GROUP BY UPPER(CURSO);

--MOSTRAR SOLO LOS QUE TIENEN MÁS DE 10 IMPLICA FILTRAR A UNA FUNCION DE AGREGACION
SELECT UPPER(CURSO), COUNT(CODIGO)
FROM ALUMNOS
HAVING COUNT(CODIGO)>=10
GROUP BY UPPER(CURSO);



-- ES DECIR, SI TENGO QUE FILTRAR UNA FUNCION DE AGREGACION UTILIZO HAVING

/********************************/
/**** REGLA GENERAL PARA LAS QUERIES ********
1. EXISTE ALGUN PRECALCULO--- UTILIZO SUBCONSULTAS.
2. EXISTE ALGUN PRECALCULO, VUELVO AL PUNTO UNO, Y SINO CONTINUO
3. DONDE ESTA LA INFORMACIÓN QUE INFORMACIÓN QUIERO MOSTRAR
4. QUE INFORMACIÓN QUIERO MOSTRAR
5. EXISTE ALGUNA FUNCION DE AGREGACION-- SI ES ASI, TODO LO QUE ESTA FUERA DE LA FUNCIONES DE AGREGACION VA AL GROUP BY
6. EXISTE ALGUNA CONDICION SOBRE LAS COLUMNAS DE LA TABLA--- ESTO VA AL WHERE.
7. EXISTE ALGUNA CONDICION SOBRE LAS FUNCIONES DE AGREACION-- ESTO VA AL HAVING
8. EXISTE ALGUNA ORDENACIÓN -- ESTO VA AL ORDER BY
****/

-- OBTENER LOS CURSOS QUE TIENEN MÁS DE 10 ALUMNOS Y QUE CONTENGA ALUMNOS CUYO NOMBRE CONTENGA LA LETRA A
-- MOSTRAR EL NOMBRE, EL NUMERO DE ALUMNOS Y ORDENA DESCENDENTEMENTE POR EL NOMBRE.
SELECT UPPER(CURSO), COUNT(CODIGO)
FROM ALUMNOS
WHERE UPPER(NOMBRE) LIKE '%A%'
GROUP BY UPPER(CURSO)
HAVING COUNT(CODIGO) >=10
ORDER BY UPPER(CURSO) DESC;