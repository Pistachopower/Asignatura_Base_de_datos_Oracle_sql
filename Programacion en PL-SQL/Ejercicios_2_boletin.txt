set SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE  p_cadena_alreves(
v_cadena VARCHAR2
)
IS
alreves VARCHAR2(30);
BEGIN
for i in reverse 1..length(v_cadena) loop
    alreves:= alreves || substr(v_cadena, i,1);
end loop;

DBMS_OUTPUT.PUT_LINE(alreves);

EXCEPTION
WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No se encontró nada.');
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('error' || SQLERRM);
END p_cadena_alreves;


begin 
p_cadena_alreves('LANA');
end;


CREATE OR REPLACE FUNCTION F_ANIO
(P_FECHA DATE)
RETURN NUMBER
IS
   V_ANIO NUMBER(4);
BEGIN
    V_ANIO:= TO_NUMBER(TO_CHAR(P_FECHA, 'YYYY'));
    RETURN v_anio; 
EXCEPTION
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Ocurrió el error ' ||SQLCODE ||' ---mensaje: ' || SQLERRM);    
    RETURN SQLERRM;
END;

DECLARE 
--V_DATO:= TO_DATE('20/08/1993', 'DD/MM/YYYY');
RESULTADO NUMBER(4);
BEGIN 
RESULTADO:= F_ANIO(TO_DATE('20/08/1993', 'DD/MM/YYYY'));
DBMS_OUTPUT.PUT_LINE(RESULTADO);
END;


CREATE OR REPLACE FUNCTION F_NUMEROS_ANIO
(P_FECHA DATE, P_FECHA_2 DATE)
RETURN NUMBER
IS
   V_ANIO NUMBER(10);
BEGIN
    V_ANIO:= (MONTHS_BETWEEN(P_FECHA,P_FECHA_2)/12);
    RETURN  V_ANIO; 
EXCEPTION
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Ocurrió el error ' ||SQLCODE ||' ---mensaje: ' || SQLERRM);    
    RETURN SQLERRM;
END;


SELECT F_NUMEROS_ANIO(TO_DATE('20/08/2003', 'DD/MM/YYYY'), 
TO_DATE('20/08/1995', 'DD/MM/YYYY')) FROM DUAL;


CREATE OR REPLACE FUNCTION F_TRIENIOS
(P_FECHA DATE, P_FECHA_2 DATE)
RETURN NUMBER
AS
   V_TRIENIOS NUMBER(10);
BEGIN
    V_TRIENIOS:= TRUNC(F_NUMEROS_ANIO(P_FECHA,P_FECHA_2)/3);
    RETURN V_TRIENIOS; 
EXCEPTION
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Ocurrió el error ' ||SQLCODE ||' ---mensaje: ' || SQLERRM);    
    RETURN SQLERRM;
END;

SELECT F_TRIENIOS(TO_DATE('20/08/2003', 'DD/MM/YYYY'), 
TO_DATE('20/08/1995', 'DD/MM/YYYY')) FROM DUAL;


CREATE OR REPLACE FUNCTION F_SUST_POR_BLANCO
(P_CADENA VARCHAR2)
RETURN VARCHAR2
AS
   V_NUEVA_CADENA VARCHAR2(300);
   CAR CHAR(1);
BEGIN
    FOR I IN 1..LENGTH(P_CADENA) LOOP
        CAR:= SUBSTR(P_CADENA, I, 1);
        IF (ASCII(CAR) NOT BETWEEN 65 AND 90)
        AND (ASCII(CAR) NOT BETWEEN 97 AND 122) THEN
            CAR:= '';
        END IF;
        
        V_NUEVA_CADENA:= V_NUEVA_CADENA ||  CAR;
    END LOOP;
    RETURN V_NUEVA_CADENA; 
EXCEPTION
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Ocurrió el error ' ||SQLCODE ||' ---mensaje: ' || SQLERRM);    
    RETURN SQLERRM;
END;

SELECT F_SUST_POR_BLANCO('123 hola!') FROM dual;
-- Resultado: 'Hola mundo'


DECLARE
V_CADENA VARCHAR2(100);
V_CADENA_LIMPIA VARCHAR2(100);
BEGIN 
V_CADENA := '¡Hola, 123 mundo!';
V_CADENA_LIMPIA:= F_SUST_POR_BLANCO(V_CADENA);
DBMS_OUTPUT.PUT_LINE(v_cadena_limpia);
END;


/*
Codificar un procedimiento que permita borrar un empleado cuyo número se
pasará en la llamada.
*/

select * 
from emp;

CREATE OR REPLACE PROCEDURE SP_BORRAR_EMPLE (
    v_num_empno      emp.empno%TYPE
) IS
BEGIN
    DELETE FROM emp
    WHERE
        empno = v_num_empno;


EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Ocurrio el error'
                             || sqlcode
                             || '--- mensaje:');
END;

begin
SP_BORRAR_EMPLE(7839);
end;


/*
Escribir un procedimiento que modifique la localidad de un departamento.
El procedimiento recibirá como parámetros el número del 
departamento y la localidad
nueva.
*/

select * 
from dept;

CREATE OR REPLACE PROCEDURE SP_BORRAR_DEPART (
    v_num_depart      dept.deptno%TYPE,
    v_loc      dept.loc%TYPE
) IS
BEGIN
UPDATE dept
SET
    loc = v_loc
WHERE
    deptno = v_num_depart;


EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Ocurrio el error'
                             || sqlcode
                             || '--- mensaje:');
END;

begin
SP_BORRAR_DEPART(10, 'SEVILLA');
end;


/*
Desarrollar un procedimiento que visualice el apellido y la fecha de alta de todos los
empleados ordenados por apellido.
*/

SELECT
    ename,
    hiredate
FROM
    emp
ORDER BY
    ename;

CREATE OR REPLACE PROCEDURE sp_visualizar_ape_fech 
IS

    CURSOR c_visualizar_ape_fech IS
SELECT
    ename,
    hiredate
FROM
    emp
ORDER BY
    ename;

    v_nombre    emp.ename%TYPE;
    v_fec_contr   emp.hiredate%TYPE;
BEGIN
    OPEN c_visualizar_ape_fech;
    LOOP
        FETCH c_visualizar_ape_fech INTO
            v_nombre,
            v_fec_contr;
            dbms_output.put_line( v_nombre || ' '  || v_fec_contr);
        EXIT WHEN c_visualizar_ape_fech%notfound;
    END LOOP;

    CLOSE c_visualizar_ape_fech;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Ocurrió el error '
                             || sqlcode
                             || ' ---mensaje: '
                             || sqlerrm);
END;


begin 
sp_visualizar_ape_fech();
end;

CREATE OR REPLACE PROCEDURE sp_depart_numEmp 
IS

    CURSOR c_depart_numEmp IS
select d.dname, count(e.empno)
from emp e, dept d
where d.deptno= e.deptno(+)
group by d.dname;

    v_dname    dept.dname%TYPE;
    v_num_emp   emp.empno%TYPE;
BEGIN
    OPEN c_depart_numEmp;
    LOOP
        FETCH c_depart_numEmp INTO
            v_dname,
            v_num_emp;
            dbms_output.put_line( v_dname || ' '  || v_num_emp);
        EXIT WHEN c_depart_numEmp%notfound;
    END LOOP;

    CLOSE c_depart_numEmp;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Ocurrió el error '
                             || sqlcode
                             || ' ---mensaje: '
                             || sqlerrm);
END;

begin 
sp_depart_numEmp();
end;

/*
Escribir un procedimiento que reciba una cadena y visualice el 
apellido y el número de empleado de todos los empleados 
cuyo apellido contenga la cadena especificada. Al
finalizar visualizar el número de empleados mostrados.
*/


CREATE OR REPLACE PROCEDURE sp_listar_empleados (
    p_cadena IN emp.ename%TYPE
) IS

    CURSOR c_listar_empleados IS
    SELECT
        ename,
        empno
    FROM
        emp
    WHERE
        ename LIKE '%' || p_cadena || '%';

    v_apellido   emp.ename%TYPE;
    v_num_emp    emp.empno%TYPE;
    v_total_emp  number:=0;
BEGIN
    OPEN c_listar_empleados;
    LOOP
        FETCH c_listar_empleados INTO
            v_apellido,
            v_num_emp;
        EXIT WHEN c_listar_empleados%notfound;
        v_total_emp := v_total_emp + 1;
        dbms_output.put_line('APELLIDO '
                             || v_apellido
                             || ' NUMERO EMPLEADO '
                             || v_num_emp
                             || ' / NUMEROS DE EMPLEADOS: '
                             || v_total_emp);
    END LOOP;
    CLOSE c_listar_empleados;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Ocurrió el error '
                             || sqlcode
                             || ' ---mensaje: '
                             || sqlerrm);
        RETURN;
END;
/

BEGIN
sp_listar_empleados('FORD');
END;
/

/*
Escribir un programa que visualice el apellido y el salario de 
los cinco empleados que
tienen el salario más alto.
*/
CREATE OR REPLACE PROCEDURE emp_5maxsal AS

    CURSOR c_emp IS
    SELECT
        ename,
        sal
    FROM
        emp
    ORDER BY
        sal DESC;

    vr_emp   c_emp%rowtype; --usa el mismo tipo de dato del select
    i        NUMBER; --se usa para contar las 5 filas que apareceran
BEGIN
    i := 1;
    OPEN c_emp;
    FETCH c_emp INTO vr_emp; --guarda la consulta completa en vr_emp
    WHILE c_emp%found AND i <= 5 LOOP --c_emp%found= true y i>=5
        dbms_output.put_line(vr_emp.ename
                             || ' * '
                             || vr_emp.sal);
        FETCH c_emp INTO vr_emp; --el resultado de la select lo almacena en vr_emp
        i := i + 1;
    END LOOP;

    CLOSE c_emp;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Ocurrió el error '
                             || sqlcode
                             || ' ---mensaje: '
                             || sqlerrm);
        RETURN;
END emp_5maxsal;
/

begin 
emp_5maxsal();
end; 
